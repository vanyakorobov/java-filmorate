package ru.yandex.practicum.filmorate;

import ru.yandex.practicum.filmorate.exception.ValidationException;
import ru.yandex.practicum.filmorate.manager.FilmsManager;
import ru.yandex.practicum.filmorate.model.Film;
import org.junit.jupiter.api.*;
import java.time.LocalDate;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@DisplayName("FilmManagerTests –¥–æ–ª–∂–µ–Ω ")
public class FilmManagerTests {
    private FilmsManager filmsManager;
    private Map<Integer, Film> films;

    @BeforeEach
    public void createUserManager() {
        filmsManager = new FilmsManager();
        films = filmsManager.getFilms();
    }

    @AfterEach
    public void clearFilmManager() {
        films.clear();
        filmsManager.setCurrentID(0);
    }

    @DisplayName("—Å–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å–º")
    @Test
    void createFilm() {
        LocalDate releaseDate = LocalDate.of(2021, 6, 7);
        Film film = Film.builder()
                .id(0)
                .name("filmName")
                .description("some")
                .releaseDate(releaseDate)
                .duration(120)
                .build();
        Film createdFilm = filmsManager.createFilm(film);

        assertEquals(1, createdFilm.getId(), "ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ != 1");
        assertEquals("filmName", createdFilm.getName());
        assertEquals(1, films.size(), "—Ä–∞–∑–º–µ—Ä –º–∞–ø—ã != 1");
    }

    @DisplayName("–ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–ª—å–º, –µ—Å–ª–∏ name=null")
    @Test
    void doNotCreateFilmWithIncorrectName() {
        LocalDate releaseDate = LocalDate.of(2021, 6, 7);
        Film film = Film.builder()
                .id(0)
                .description("some")
                .releaseDate(releaseDate)
                .duration(120)
                .build();

        ValidationException exception = assertThrows(
                ValidationException.class,
                () -> filmsManager.createFilm(film)
        );

        assertEquals("üîπ–ø–æ–ª–µ \"name\" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!", exception.getMessage());
        assertEquals(0, films.size(), "—Ä–∞–∑–º–µ—Ä –º–∞–ø—ã != 0");
    }

    @DisplayName("–ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–ª—å–º, –µ—Å–ª–∏ description.length()>200")
    @Test
    void doNotCreateFilmWithIncorrectDescription() {
        LocalDate releaseDate = LocalDate.of(2021, 6, 7);
        Film film = Film.builder()
                .id(0)
                .name("filmName")
                .description("–ü—è—Ç–µ—Ä–æ –¥—Ä—É–∑–µ–π ( –∫–æ–º–∏–∫-–≥—Ä—É–ø–ø–∞ ¬´–®–∞—Ä–ª–æ¬ª), –ø—Ä–∏–µ–∑–∂–∞—é—Ç –≤ –≥–æ—Ä–æ–¥ –ë—Ä–∏–∑—É–ª—å. –ó–¥–µ—Å—å –æ–Ω–∏ —Ö–æ—Ç—è—Ç —Ä–∞–∑—ã—Å–∫–∞—Ç—å –≥–æ—Å–ø–æ–¥–∏–Ω–∞ –û–≥—é—Å—Ç–∞ –ö—É–≥–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–æ–ª–∂–∞–ª –∏–º –¥–µ–Ω—å–≥–∏, –∞ –∏–º–µ–Ω–Ω–æ 20 –º–∏–ª–ª–∏–æ–Ω–æ–≤. –æ –ö—É–≥–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∑–∞ –≤—Ä–µ–º—è ¬´—Å–≤–æ–µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è¬ª, —Å—Ç–∞–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –ö–æ–ª–æ–º–±–∞–Ω–∏.")
                .releaseDate(releaseDate)
                .duration(120)
                .build();

        ValidationException exception = assertThrows(
                ValidationException.class,
                () -> filmsManager.createFilm(film)
        );

        assertEquals("üîπ–¥–ª–∏–Ω–∞ description –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤!", exception.getMessage());
        assertEquals(0, films.size(), "—Ä–∞–∑–º–µ—Ä –º–∞–ø—ã != 0");
    }

    @DisplayName("–ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–ª—å–º, –µ—Å–ª–∏ releaseDate —Ä–∞–Ω—å—à–µ, —á–µ–º 1885/12/28")
    @Test
    void doNotCreateFilmWithIncorrectReleaseDate() {
        LocalDate releaseDate = LocalDate.of(1884, 6, 7);
        Film film = Film.builder()
                .id(0)
                .name("filmName")
                .description("some")
                .releaseDate(releaseDate)
                .duration(120)
                .build();

        ValidationException exception = assertThrows(
                ValidationException.class,
                () -> filmsManager.createFilm(film)
        );

        assertEquals("üîπ\"releaseDate\" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ, —á–µ–º 1895/12/28", exception.getMessage());
        assertEquals(0, films.size(), "—Ä–∞–∑–º–µ—Ä –º–∞–ø—ã != 0");
    }

    @DisplayName("–ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–ª—å–º, –µ—Å–ª–∏ duration<0")
    @Test
    void doNotCreateFilmWithIncorrectDuration() {
        LocalDate releaseDate = LocalDate.of(1984, 6, 7);
        Film film = Film.builder()
                .id(0)
                .name("filmName")
                .description("some")
                .releaseDate(releaseDate)
                .duration(-1)
                .build();

        ValidationException exception = assertThrows(
                ValidationException.class,
                () -> filmsManager.createFilm(film)
        );

        assertEquals("üîπ–ø–æ–ª–µ \"duration\" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é!", exception.getMessage());
        assertEquals(0, films.size(), "—Ä–∞–∑–º–µ—Ä –º–∞–ø—ã != 0");
    }
}